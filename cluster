#!/usr/bin/env python

import napalm_ios
import sys
import os
import json
import threading
from getpass import getpass
from Queue import Queue

from datetime import datetime

# Simplify stdout errors
sys.tracebacklimit = 0

# Max threads count
threadsmax = 100
if threadsmax < 1:
    raise ValueError("Max Thread count must be greater than 0")

# Queue of host and config pairs in queue
hostconfigdictionary = Queue()

def core(jsonfile):
    acct = raw_input("Account: ")
    passwd = getpass("Password: ")
    # Prep host/config queue
    configprep(jsonfile)
    # Start deploy threads
    while hostconfigdictionary.qsize():
        if threading.activeCount() <= threadsmax:
            dictget = hostconfigdictionary.get()
            threading.Thread(target=runnapalm,args=(acct, passwd, dictget["host"], dictget["config"])).start()

def configprep(hosts):
    data = json.load(open(hosts)).iteritems()
    for cluster, settings in data:
        hosts = settings["hosts"]
        options = settings["options"]
        adjustments = settings["adjustments"]

        for host in hosts:
            configload = open(cluster).read().format(**options)
            hostconfigdictionary.put({"host":host, "config":configload})
            for option in adjustments:
                options[option] += adjustments[option]

def runnapalm(username, password, hostname, payload):
    print "{0} - {1} Deploy Start\n".format(datetime.now().time(), hostname)
    connection = napalm_ios.IOSDriver(hostname=hostname, username=username, password=password)
    connection.open()
    connection.load_merge_candidate(config=payload)
    connection.commit_config()
    connection.close()
    print "{0} - {1} Deploy Completion\n".format(datetime.now().time(), hostname)

def errcheck(errorlist):
    if len(errorlist) > 0:
        for error in errorlist:
            print error
        sys.exit(1)

# Error checks for configuration files
# Rewrite errors to use dictionaries of errors
if __name__ == '__main__':
    try:
        hostsfile = sys.argv[1]
    except IndexError:
        print 'usage: nscript HOSTSJSON'
        sys.exit(1)

    errors = []
    # Check if json exists
    for item in [hostsfile]:
        if not (os.path.exists(item) and os.path.isfile(item) and hostsfile.endswith(".json")):
            errors.append('Missing or invalid file (.json): {0}'.format(item))
    errcheck(errors)

    # Check if clusterfile exists and if json is formatted properly
    changescheck = json.load(open(hostsfile))
    for cluster, settings in changescheck.iteritems():
        if not (os.path.exists(cluster) and os.path.isfile(cluster)):
            errors.append('Missing or invalid cluster file for: "{}"'.format(cluster))
        if "hosts" not in settings.keys():
            errors.append('Missing hosts list for "{}"'.format(cluster))
        if "options" not in settings.keys():
            errors.append('Missing options dictionary in "{}"'.format(cluster))
    errcheck(errors)

    core(hostsfile)
